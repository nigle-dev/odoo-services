apiVersion: v1
data:
  migration.yml: |
    migration:
      options:
        install_command: odoo --without-demo=${WITHOUT_DEMO:-True}
      versions:
        - version: setup
          operations:
            pre:
              - "sh -c 'psql -c \"CREATE EXTENSION pg_trgm;\"'"
          addons:
            upgrade:
              - services_org_install 
kind: ConfigMap
metadata:
  name: migration-config
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    protocol: TCP
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: db
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: odoo
  name: odoo
spec:
  ports:
  - name: http
    port: 8069
    targetPort: 8069
  - name: http-lp
    port: 8072
    targetPort: 8072
  selector:
    app.kubernetes.io/name: odoo
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-odoo
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: odoo
  name: odoo
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: odoo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: odoo
    spec:
      containers:
      - env:
        - name: ADDONS_PATH
          value: /odoo/local-src,/odoo/external-src,/odoo/src/addons
        - name: ADMIN_PASSWD
          value: admin
        - name: DB_NAME
          value: odoodb
        - name: DB_PASS
          value: odoo
        - name: DB_USER
          value: odoo
        - name: DB_HOST
          value: db
        - name: DB_PORT
          value: "5432"
        - name: LOG_HANDLER
          value: :WARN
        - name: MARABUNTA_ALLOW_SERIE
          value: "false"
        - name: MARABUNTA_MODE
          value: demo
        - name: PATH
          value: /usr/local/bin:/odoo/odoo-bin:/odoo/.local/bin:/home/nils/.local/bin:/home/nils/.krew/bin:/home/nils/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin
        - name: RUNNING_ENV
          value: dev
        - name: WITHOUT_DEMO
          value: "false"
        image: smoosedev/odoo_services:f789c95b
        imagePullPolicy: IfNotPresent
        name: odoo
        ports:
        - containerPort: 8069
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
        volumeMounts:
        - mountPath: /odoo/data
          name: data-odoo
        - mountPath: /odoo/migration.yml
          name: odoo-migration-vars
          subPath: migration.yml
      restartPolicy: Always
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsUser: 999
      volumes:
      - name: data-odoo
        persistentVolumeClaim:
          claimName: data-odoo
      - configMap:
          name: migration-config
        name: odoo-migration-vars
status: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: db
  serviceName: db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: db
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          value: odoo
        - name: POSTGRES_USER
          value: odoo
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: LC_COLLATE
          value: en_US.UTF-8
        image: postgres:9.6
        name: db
        ports:
        - containerPort: 5432
          name: tcp-postgresql
          protocol: TCP
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data-db
      restartPolicy: Always
      volumes:
      - name: data-db
        persistentVolumeClaim:
          claimName: data-db
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/issuer: letsencrypt-production
    cert-manager.io/issuer-kind: ClusterIssuer
  labels:
    app.kubernetes.io/instance: odoo
    app.kubernetes.io/name: odoo
  name: odoo
spec:
  ingressClassName: nginx
  rules:
  - host: odoo-services.k8s.onestein.eu
    http:
      paths:
      - backend:
          service:
            name: odoo
            port:
              name: http
        path: /
        pathType: ImplementationSpecific
      - backend:
          service:
            name: odoo
            port:
              name: http-lp
        path: /longpolling
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - odoo-services.k8s.onestein.eu
    secretName: odoo-services.k8s.onestein.eu-tls
